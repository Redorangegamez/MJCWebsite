generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

enum GameVariant {
    JAPANESE
    HONG_KONG
}

enum GameType {
    RANKED
    PLAY_OFF
    TOURNEY
}

enum JapaneseScoreType {
    DEAL_IN
    RON
    SELF_DRAW
    DECK_OUT
    MISTAKE
    RESHUFFLE
    PAO_KAN
    PAO_YAKUMAN
}

enum HongKongScoreType {
    DEAL_IN
    SELF_DRAW
    DECK_OUT
    MISTAKE
    PAO
}

enum GameStatus {
    IN_PROGRESS
    FINISHED
}

enum Wind {
    EAST
    SOUTH
    WEST
    NORTH
}

model Player {
    id                String          @id @default(cuid())
    email             String          @unique
    username          String          @unique
    firstName         String
    lastName          String
    password          String
    admin             Boolean         @default(false)
    japaneseQualified Boolean         @default(false)
    hongKongQualified Boolean         @default(false)
    japaneseElo       Int             @default(1500)
    hongKongElo       Int             @default(1500)
    createdAt         DateTime        @default(now())
    japaneseScores    JapaneseScore[]
    hongKongScores    HongKongScore[]
    gamesPlayed       PlayerGame[]
    gamesRecorded     Game[]
}

model PlayerGame {
    id        String @id @default(cuid())
    wind      Wind
    eloChange Int?
    position  Int?
    player    Player @relation(fields: [playerId], references: [id])
    playerId  String
    game      Game   @relation(fields: [gameId], references: [id])
    gameId    Int
}

model Game {
    id             Int             @id @default(autoincrement())
    season         Season          @relation(fields: [seasonId], references: [id])
    seasonId       String
    status         GameStatus
    gameVariant    GameVariant
    gameType       GameType
    createdAt      DateTime        @default(now())
    endedAt        DateTime?
    recordedBy     Player          @relation(fields: [recordedById], references: [id])
    recordedById   String
    players        PlayerGame[]
    japaneseRounds JapaneseRound[]
    hongKongRounds HongKongRound[]
}

model Season {
    id        String   @id @default(cuid())
    name      String
    startDate DateTime @default(now())
    endDate   DateTime
    games     Game[]
}

model JapaneseRound {
    id           String          @id @default(cuid())
    roundCount   Int
    roundWind    Wind
    roundNumber  Int
    bonus        Int
    riichiSticks Int
    game         Game            @relation(fields: [gameId], references: [id])
    gameId       Int
    scores       JapaneseScore[]
}

model HongKongRound {
    id          String          @id @default(cuid())
    roundCount  Int
    roundWind   Wind
    roundNumber Int
    bonus       Int
    game        Game            @relation(fields: [gameId], references: [id])
    gameId      Int
    scores      HongKongScore[]
}

model JapaneseScore {
    id          String        @id @default(cuid())
    scoreChange Int
    riichi      Boolean?
    round       JapaneseRound @relation(fields: [roundId], references: [id])
    user        Player        @relation(fields: [userId], references: [id])
    userId      String
    roundId     String
}

model HongKongScore {
    id          String        @id @default(cuid())
    scoreChange Int
    riichi      Boolean?
    round       HongKongRound @relation(fields: [roundId], references: [id])
    user        Player        @relation(fields: [userId], references: [id])
    userId      String
    roundId     String
}
